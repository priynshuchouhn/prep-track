// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  image        String? // Profile picture
  role         Role           @default(STUDENT) // Enum (Admin or Student)
  password String  // Ensure this field exists!
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  posts        Post[] // Relation with posts
  lastPostedAt DateTime? // Track last post date for reminders
  Reminder     Reminder?
  Leaderboard  Leaderboard[]
  Comment      Comment[]
  Like         Like[]
  Notification Notification[]
  Streak       Streak?
}

model Post {
  id        String    @id @default(uuid())
  content   String    @db.Text // Supports long text
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      String[] // Array of tags
  Comment   Comment[]
  Like      Like[]
  PostTag   PostTag[]
}

model Reminder {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  lastSentAt DateTime @default(now()) // Last reminder sent
}

model Leaderboard {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  rank      Int
  score      Int
  postCount Int    @default(0) // Total posts
  streak    Int    @default(0) // Longest posting streak
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate likes by the same user
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      NotificationType // ENUM (Reminder, System Update, Comment, Like)
  read      Boolean          @default(false) // Mark if user has seen it
  createdAt DateTime         @default(now())
}

enum NotificationType {
  REMINDER
  SYSTEM_UPDATE
  COMMENT
  LIKE
}

model Tag {
  id    String    @id @default(uuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId]) // Composite primary key to prevent duplicates
}

model Streak {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  currentStreak Int      @default(0) // Active streak
  longestStreak Int      @default(0) // All-time record
  lastUpdated   DateTime @default(now()) // Last streak update
}

enum Role {
  ADMIN
  STUDENT
}
